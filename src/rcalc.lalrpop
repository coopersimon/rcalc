use std::str::FromStr;
use crate::expr::Expr;
use crate::number::Number;

grammar;

pub Expr: Box<Expr> = {
    <v:Var> "=" <e:AddSubExpr>  => Box::new(Expr::SetVar(v, e)),
    AddSubExpr
};

Var: String = r"[a-z][0-9]*" => <>.to_string();

AddSubExpr: Box<Expr> = {
    <l:AddSubExpr> "+" <r:MulDivExpr> => Box::new(Expr::Add(l, r)),
    <l:AddSubExpr> "-" <r:MulDivExpr> => Box::new(Expr::Sub(l, r)),
    MulDivExpr,
};

MulDivExpr: Box<Expr> = {
    <l:MulDivExpr> "*" <r:Term> => Box::new(Expr::Mul(l, r)),
    <l:MulDivExpr> "/" <r:Term> => Box::new(Expr::Div(l, r)),
    Term,
};

Term: Box<Expr> = {
    <n:Num> => Box::new(Expr::Num(n)),
    <v:Var> => Box::new(Expr::Var(v)),
    "ans"   => Box::new(Expr::Ans),
    "(" <Expr> ")"
};

Num: Number = {
    r"\.[0-9]+"         => Number::Fraction(f64::from_str(<>).unwrap()),
    r"[0-9]+\.[0-9]*"   => Number::Fraction(f64::from_str(<>).unwrap()),
    r"0x[0-9a-fA-F]+"   => Number::Integer(i64::from_str_radix(&<>[2..], 16).unwrap()),
    r"0[0-7]+"          => Number::Integer(i64::from_str_radix(<>, 8).unwrap()),
    r"0b[0-1]+"         => Number::Integer(i64::from_str_radix(&<>[2..], 2).unwrap()),
    r"[1-9][0-9]*"      => Number::Integer(i64::from_str(<>).unwrap())
};